Grammar

    0 $accept: CompUnit $end

    1 CompUnit: CompUnitList

    2 CompUnitList: FuncDef
    3             | Decl
    4             | CompUnitList FuncDef
    5             | CompUnitList Decl

    6 FuncDef: Type IDENT '(' ')' Block
    7        | Type IDENT '(' FuncFParams ')' Block

    8 FuncFParams: FuncFParam
    9            | FuncFParams ',' FuncFParam

   10 FuncFParam: Type IDENT

   11 FuncRParams: Exp
   12            | FuncRParams ',' Exp

   13 Block: '{' BlockItemList '}'

   14 Stmt: OpenStmt
   15     | ClosedStmt

   16 ClosedStmt: SimpleStmt
   17           | IF '(' Exp ')' ClosedStmt ELSE ClosedStmt
   18           | WHILE '(' Exp ')' ClosedStmt

   19 OpenStmt: IF '(' Exp ')' Stmt
   20         | IF '(' Exp ')' ClosedStmt ELSE OpenStmt
   21         | WHILE '(' Exp ')' OpenStmt

   22 SimpleStmt: RETURN Exp ';'
   23           | RETURN ';'
   24           | LVal '=' Exp ';'
   25           | Block
   26           | Exp ';'
   27           | ';'
   28           | BREAK ';'
   29           | CONTINUE ';'

   30 Exp: LOrExp

   31 LOrExp: LAndExp
   32       | LOrExp OROP LAndExp

   33 LAndExp: EqExp
   34        | LAndExp ANDOP EqExp

   35 EqExp: RelExp
   36      | EqExp EQOP RelExp

   37 RelExp: AddExp
   38       | RelExp RELOP AddExp

   39 AddExp: MulExp
   40       | AddExp ADDOP MulExp

   41 MulExp: UnaryExp
   42       | MulExp MULOP UnaryExp

   43 UnaryExp: PrimaryExp
   44         | UNARYOP UnaryExp
   45         | IDENT '(' ')'
   46         | IDENT '(' FuncRParams ')'

   47 PrimaryExp: '(' Exp ')'
   48           | Number
   49           | LVal

   50 Decl: ConstDecl
   51     | VarDecl

   52 ConstDecl: CONST Type ConstDefList ';'

   53 ConstDef: IDENT '=' ConstInitVal

   54 ConstInitVal: ConstExp

   55 BlockItem: Decl
   56          | Stmt

   57 ConstExp: Exp

   58 VarDecl: Type VarDefList ';'

   59 VarDef: IDENT
   60       | IDENT '=' InitVal

   61 InitVal: Exp

   62 BlockItemList: %empty
   63              | BlockItemList BlockItem

   64 ConstDefList: ConstDef
   65             | ConstDefList ',' ConstDef

   66 VarDefList: VarDef
   67           | VarDefList ',' VarDef

   68 Number: INT_CONST

   69 LVal: IDENT

   70 Type: INT
   71     | VOID

   72 UNARYOP: '+'
   73        | '-'
   74        | '!'

   75 MULOP: '*'
   76      | '/'
   77      | '%'

   78 ADDOP: '+'
   79      | '-'

   80 RELOP: LE
   81      | GE
   82      | '<'
   83      | '>'

   84 EQOP: EQ
   85     | NE

   86 ANDOP: AND

   87 OROP: OR


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 74
    '%' (37) 77
    '(' (40) 6 7 17 18 19 20 21 45 46 47
    ')' (41) 6 7 17 18 19 20 21 45 46 47
    '*' (42) 75
    '+' (43) 72 78
    ',' (44) 9 12 65 67
    '-' (45) 73 79
    '/' (47) 76
    ';' (59) 22 23 24 26 27 28 29 52 58
    '<' (60) 82
    '=' (61) 24 53 60
    '>' (62) 83
    '{' (123) 13
    '}' (125) 13
    error (256)
    INT (258) 70
    VOID (259) 71
    RETURN (260) 22 23
    CONST (261) 52
    IF (262) 17 19 20
    ELSE (263) 17 20
    WHILE (264) 18 21
    BREAK (265) 28
    CONTINUE (266) 29
    IDENT <str_val> (267) 6 7 10 45 46 53 59 60 69
    INT_CONST <int_val> (268) 68
    LE <str_val> (269) 80
    GE <str_val> (270) 81
    EQ <str_val> (271) 84
    NE <str_val> (272) 85
    AND <str_val> (273) 86
    OR <str_val> (274) 87


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    CompUnit (36)
        on left: 1
        on right: 0
    CompUnitList <ast_val> (37)
        on left: 2 3 4 5
        on right: 1 4 5
    FuncDef <ast_val> (38)
        on left: 6 7
        on right: 2 4
    FuncFParams <vec_val> (39)
        on left: 8 9
        on right: 7 9
    FuncFParam <ast_val> (40)
        on left: 10
        on right: 8 9
    FuncRParams <vec_val> (41)
        on left: 11 12
        on right: 12 46
    Block <ast_val> (42)
        on left: 13
        on right: 6 7 25
    Stmt <ast_val> (43)
        on left: 14 15
        on right: 19 56
    ClosedStmt <ast_val> (44)
        on left: 16 17 18
        on right: 15 17 18 20
    OpenStmt <ast_val> (45)
        on left: 19 20 21
        on right: 14 20 21
    SimpleStmt <ast_val> (46)
        on left: 22 23 24 25 26 27 28 29
        on right: 16
    Exp <ast_val> (47)
        on left: 30
        on right: 11 12 17 18 19 20 21 22 24 26 47 57 61
    LOrExp <ast_val> (48)
        on left: 31 32
        on right: 30 32
    LAndExp <ast_val> (49)
        on left: 33 34
        on right: 31 32 34
    EqExp <ast_val> (50)
        on left: 35 36
        on right: 33 34 36
    RelExp <ast_val> (51)
        on left: 37 38
        on right: 35 36 38
    AddExp <ast_val> (52)
        on left: 39 40
        on right: 37 38 40
    MulExp <ast_val> (53)
        on left: 41 42
        on right: 39 40 42
    UnaryExp <ast_val> (54)
        on left: 43 44 45 46
        on right: 41 42 44
    PrimaryExp <ast_val> (55)
        on left: 47 48 49
        on right: 43
    Decl <ast_val> (56)
        on left: 50 51
        on right: 3 5 55
    ConstDecl <ast_val> (57)
        on left: 52
        on right: 50
    ConstDef <ast_val> (58)
        on left: 53
        on right: 64 65
    ConstInitVal <ast_val> (59)
        on left: 54
        on right: 53
    BlockItem <ast_val> (60)
        on left: 55 56
        on right: 63
    ConstExp <ast_val> (61)
        on left: 57
        on right: 54
    VarDecl <ast_val> (62)
        on left: 58
        on right: 51
    VarDef <ast_val> (63)
        on left: 59 60
        on right: 66 67
    InitVal <ast_val> (64)
        on left: 61
        on right: 60
    BlockItemList <vec_val> (65)
        on left: 62 63
        on right: 13 63
    ConstDefList <vec_val> (66)
        on left: 64 65
        on right: 52 65
    VarDefList <vec_val> (67)
        on left: 66 67
        on right: 58 67
    Number <int_val> (68)
        on left: 68
        on right: 48
    LVal <str_val> (69)
        on left: 69
        on right: 24 49
    Type <str_val> (70)
        on left: 70 71
        on right: 6 7 10 52 58
    UNARYOP <str_val> (71)
        on left: 72 73 74
        on right: 44
    MULOP <str_val> (72)
        on left: 75 76 77
        on right: 42
    ADDOP <str_val> (73)
        on left: 78 79
        on right: 40
    RELOP <str_val> (74)
        on left: 80 81 82 83
        on right: 38
    EQOP <str_val> (75)
        on left: 84 85
        on right: 36
    ANDOP <str_val> (76)
        on left: 86
        on right: 34
    OROP <str_val> (77)
        on left: 87
        on right: 32


State 0

    0 $accept: . CompUnit $end

    INT    shift, and go to state 1
    VOID   shift, and go to state 2
    CONST  shift, and go to state 3

    CompUnit      go to state 4
    CompUnitList  go to state 5
    FuncDef       go to state 6
    Decl          go to state 7
    ConstDecl     go to state 8
    VarDecl       go to state 9
    Type          go to state 10


State 1

   70 Type: INT .

    $default  reduce using rule 70 (Type)


State 2

   71 Type: VOID .

    $default  reduce using rule 71 (Type)


State 3

   52 ConstDecl: CONST . Type ConstDefList ';'

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    Type  go to state 11


State 4

    0 $accept: CompUnit . $end

    $end  shift, and go to state 12


State 5

    1 CompUnit: CompUnitList .
    4 CompUnitList: CompUnitList . FuncDef
    5             | CompUnitList . Decl

    INT    shift, and go to state 1
    VOID   shift, and go to state 2
    CONST  shift, and go to state 3

    $default  reduce using rule 1 (CompUnit)

    FuncDef    go to state 13
    Decl       go to state 14
    ConstDecl  go to state 8
    VarDecl    go to state 9
    Type       go to state 10


State 6

    2 CompUnitList: FuncDef .

    $default  reduce using rule 2 (CompUnitList)


State 7

    3 CompUnitList: Decl .

    $default  reduce using rule 3 (CompUnitList)


State 8

   50 Decl: ConstDecl .

    $default  reduce using rule 50 (Decl)


State 9

   51 Decl: VarDecl .

    $default  reduce using rule 51 (Decl)


State 10

    6 FuncDef: Type . IDENT '(' ')' Block
    7        | Type . IDENT '(' FuncFParams ')' Block
   58 VarDecl: Type . VarDefList ';'

    IDENT  shift, and go to state 15

    VarDef      go to state 16
    VarDefList  go to state 17


State 11

   52 ConstDecl: CONST Type . ConstDefList ';'

    IDENT  shift, and go to state 18

    ConstDef      go to state 19
    ConstDefList  go to state 20


State 12

    0 $accept: CompUnit $end .

    $default  accept


State 13

    4 CompUnitList: CompUnitList FuncDef .

    $default  reduce using rule 4 (CompUnitList)


State 14

    5 CompUnitList: CompUnitList Decl .

    $default  reduce using rule 5 (CompUnitList)


State 15

    6 FuncDef: Type IDENT . '(' ')' Block
    7        | Type IDENT . '(' FuncFParams ')' Block
   59 VarDef: IDENT .
   60       | IDENT . '=' InitVal

    '('  shift, and go to state 21
    '='  shift, and go to state 22

    $default  reduce using rule 59 (VarDef)


State 16

   66 VarDefList: VarDef .

    $default  reduce using rule 66 (VarDefList)


State 17

   58 VarDecl: Type VarDefList . ';'
   67 VarDefList: VarDefList . ',' VarDef

    ','  shift, and go to state 23
    ';'  shift, and go to state 24


State 18

   53 ConstDef: IDENT . '=' ConstInitVal

    '='  shift, and go to state 25


State 19

   64 ConstDefList: ConstDef .

    $default  reduce using rule 64 (ConstDefList)


State 20

   52 ConstDecl: CONST Type ConstDefList . ';'
   65 ConstDefList: ConstDefList . ',' ConstDef

    ','  shift, and go to state 26
    ';'  shift, and go to state 27


State 21

    6 FuncDef: Type IDENT '(' . ')' Block
    7        | Type IDENT '(' . FuncFParams ')' Block

    INT   shift, and go to state 1
    VOID  shift, and go to state 2
    ')'   shift, and go to state 28

    FuncFParams  go to state 29
    FuncFParam   go to state 30
    Type         go to state 31


State 22

   60 VarDef: IDENT '=' . InitVal

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 38
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    InitVal     go to state 47
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 23

   67 VarDefList: VarDefList ',' . VarDef

    IDENT  shift, and go to state 51

    VarDef  go to state 52


State 24

   58 VarDecl: Type VarDefList ';' .

    $default  reduce using rule 58 (VarDecl)


State 25

   53 ConstDef: IDENT '=' . ConstInitVal

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp           go to state 53
    LOrExp        go to state 39
    LAndExp       go to state 40
    EqExp         go to state 41
    RelExp        go to state 42
    AddExp        go to state 43
    MulExp        go to state 44
    UnaryExp      go to state 45
    PrimaryExp    go to state 46
    ConstInitVal  go to state 54
    ConstExp      go to state 55
    Number        go to state 48
    LVal          go to state 49
    UNARYOP       go to state 50


State 26

   65 ConstDefList: ConstDefList ',' . ConstDef

    IDENT  shift, and go to state 18

    ConstDef  go to state 56


State 27

   52 ConstDecl: CONST Type ConstDefList ';' .

    $default  reduce using rule 52 (ConstDecl)


State 28

    6 FuncDef: Type IDENT '(' ')' . Block

    '{'  shift, and go to state 57

    Block  go to state 58


State 29

    7 FuncDef: Type IDENT '(' FuncFParams . ')' Block
    9 FuncFParams: FuncFParams . ',' FuncFParam

    ')'  shift, and go to state 59
    ','  shift, and go to state 60


State 30

    8 FuncFParams: FuncFParam .

    $default  reduce using rule 8 (FuncFParams)


State 31

   10 FuncFParam: Type . IDENT

    IDENT  shift, and go to state 61


State 32

   45 UnaryExp: IDENT . '(' ')'
   46         | IDENT . '(' FuncRParams ')'
   69 LVal: IDENT .

    '('  shift, and go to state 62

    $default  reduce using rule 69 (LVal)


State 33

   68 Number: INT_CONST .

    $default  reduce using rule 68 (Number)


State 34

   47 PrimaryExp: '(' . Exp ')'

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 63
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 35

   72 UNARYOP: '+' .

    $default  reduce using rule 72 (UNARYOP)


State 36

   73 UNARYOP: '-' .

    $default  reduce using rule 73 (UNARYOP)


State 37

   74 UNARYOP: '!' .

    $default  reduce using rule 74 (UNARYOP)


State 38

   61 InitVal: Exp .

    $default  reduce using rule 61 (InitVal)


State 39

   30 Exp: LOrExp .
   32 LOrExp: LOrExp . OROP LAndExp

    OR  shift, and go to state 64

    $default  reduce using rule 30 (Exp)

    OROP  go to state 65


State 40

   31 LOrExp: LAndExp .
   34 LAndExp: LAndExp . ANDOP EqExp

    AND  shift, and go to state 66

    $default  reduce using rule 31 (LOrExp)

    ANDOP  go to state 67


State 41

   33 LAndExp: EqExp .
   36 EqExp: EqExp . EQOP RelExp

    EQ  shift, and go to state 68
    NE  shift, and go to state 69

    $default  reduce using rule 33 (LAndExp)

    EQOP  go to state 70


State 42

   35 EqExp: RelExp .
   38 RelExp: RelExp . RELOP AddExp

    LE   shift, and go to state 71
    GE   shift, and go to state 72
    '<'  shift, and go to state 73
    '>'  shift, and go to state 74

    $default  reduce using rule 35 (EqExp)

    RELOP  go to state 75


State 43

   37 RelExp: AddExp .
   40 AddExp: AddExp . ADDOP MulExp

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77

    $default  reduce using rule 37 (RelExp)

    ADDOP  go to state 78


State 44

   39 AddExp: MulExp .
   42 MulExp: MulExp . MULOP UnaryExp

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '%'  shift, and go to state 81

    $default  reduce using rule 39 (AddExp)

    MULOP  go to state 82


State 45

   41 MulExp: UnaryExp .

    $default  reduce using rule 41 (MulExp)


State 46

   43 UnaryExp: PrimaryExp .

    $default  reduce using rule 43 (UnaryExp)


State 47

   60 VarDef: IDENT '=' InitVal .

    $default  reduce using rule 60 (VarDef)


State 48

   48 PrimaryExp: Number .

    $default  reduce using rule 48 (PrimaryExp)


State 49

   49 PrimaryExp: LVal .

    $default  reduce using rule 49 (PrimaryExp)


State 50

   44 UnaryExp: UNARYOP . UnaryExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    UnaryExp    go to state 83
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 51

   59 VarDef: IDENT .
   60       | IDENT . '=' InitVal

    '='  shift, and go to state 22

    $default  reduce using rule 59 (VarDef)


State 52

   67 VarDefList: VarDefList ',' VarDef .

    $default  reduce using rule 67 (VarDefList)


State 53

   57 ConstExp: Exp .

    $default  reduce using rule 57 (ConstExp)


State 54

   53 ConstDef: IDENT '=' ConstInitVal .

    $default  reduce using rule 53 (ConstDef)


State 55

   54 ConstInitVal: ConstExp .

    $default  reduce using rule 54 (ConstInitVal)


State 56

   65 ConstDefList: ConstDefList ',' ConstDef .

    $default  reduce using rule 65 (ConstDefList)


State 57

   13 Block: '{' . BlockItemList '}'

    $default  reduce using rule 62 (BlockItemList)

    BlockItemList  go to state 84


State 58

    6 FuncDef: Type IDENT '(' ')' Block .

    $default  reduce using rule 6 (FuncDef)


State 59

    7 FuncDef: Type IDENT '(' FuncFParams ')' . Block

    '{'  shift, and go to state 57

    Block  go to state 85


State 60

    9 FuncFParams: FuncFParams ',' . FuncFParam

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    FuncFParam  go to state 86
    Type        go to state 31


State 61

   10 FuncFParam: Type IDENT .

    $default  reduce using rule 10 (FuncFParam)


State 62

   45 UnaryExp: IDENT '(' . ')'
   46         | IDENT '(' . FuncRParams ')'

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    ')'        shift, and go to state 87
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    FuncRParams  go to state 88
    Exp          go to state 89
    LOrExp       go to state 39
    LAndExp      go to state 40
    EqExp        go to state 41
    RelExp       go to state 42
    AddExp       go to state 43
    MulExp       go to state 44
    UnaryExp     go to state 45
    PrimaryExp   go to state 46
    Number       go to state 48
    LVal         go to state 49
    UNARYOP      go to state 50


State 63

   47 PrimaryExp: '(' Exp . ')'

    ')'  shift, and go to state 90


State 64

   87 OROP: OR .

    $default  reduce using rule 87 (OROP)


State 65

   32 LOrExp: LOrExp OROP . LAndExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    LAndExp     go to state 91
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 66

   86 ANDOP: AND .

    $default  reduce using rule 86 (ANDOP)


State 67

   34 LAndExp: LAndExp ANDOP . EqExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    EqExp       go to state 92
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 68

   84 EQOP: EQ .

    $default  reduce using rule 84 (EQOP)


State 69

   85 EQOP: NE .

    $default  reduce using rule 85 (EQOP)


State 70

   36 EqExp: EqExp EQOP . RelExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    RelExp      go to state 93
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 71

   80 RELOP: LE .

    $default  reduce using rule 80 (RELOP)


State 72

   81 RELOP: GE .

    $default  reduce using rule 81 (RELOP)


State 73

   82 RELOP: '<' .

    $default  reduce using rule 82 (RELOP)


State 74

   83 RELOP: '>' .

    $default  reduce using rule 83 (RELOP)


State 75

   38 RelExp: RelExp RELOP . AddExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    AddExp      go to state 94
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 76

   78 ADDOP: '+' .

    $default  reduce using rule 78 (ADDOP)


State 77

   79 ADDOP: '-' .

    $default  reduce using rule 79 (ADDOP)


State 78

   40 AddExp: AddExp ADDOP . MulExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    MulExp      go to state 95
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 79

   75 MULOP: '*' .

    $default  reduce using rule 75 (MULOP)


State 80

   76 MULOP: '/' .

    $default  reduce using rule 76 (MULOP)


State 81

   77 MULOP: '%' .

    $default  reduce using rule 77 (MULOP)


State 82

   42 MulExp: MulExp MULOP . UnaryExp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    UnaryExp    go to state 96
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 83

   44 UnaryExp: UNARYOP UnaryExp .

    $default  reduce using rule 44 (UnaryExp)


State 84

   13 Block: '{' BlockItemList . '}'
   63 BlockItemList: BlockItemList . BlockItem

    INT        shift, and go to state 1
    VOID       shift, and go to state 2
    RETURN     shift, and go to state 97
    CONST      shift, and go to state 3
    IF         shift, and go to state 98
    WHILE      shift, and go to state 99
    BREAK      shift, and go to state 100
    CONTINUE   shift, and go to state 101
    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '{'        shift, and go to state 57
    '}'        shift, and go to state 102
    ';'        shift, and go to state 103
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Block       go to state 104
    Stmt        go to state 105
    ClosedStmt  go to state 106
    OpenStmt    go to state 107
    SimpleStmt  go to state 108
    Exp         go to state 109
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Decl        go to state 110
    ConstDecl   go to state 8
    BlockItem   go to state 111
    VarDecl     go to state 9
    Number      go to state 48
    LVal        go to state 112
    Type        go to state 113
    UNARYOP     go to state 50


State 85

    7 FuncDef: Type IDENT '(' FuncFParams ')' Block .

    $default  reduce using rule 7 (FuncDef)


State 86

    9 FuncFParams: FuncFParams ',' FuncFParam .

    $default  reduce using rule 9 (FuncFParams)


State 87

   45 UnaryExp: IDENT '(' ')' .

    $default  reduce using rule 45 (UnaryExp)


State 88

   12 FuncRParams: FuncRParams . ',' Exp
   46 UnaryExp: IDENT '(' FuncRParams . ')'

    ')'  shift, and go to state 114
    ','  shift, and go to state 115


State 89

   11 FuncRParams: Exp .

    $default  reduce using rule 11 (FuncRParams)


State 90

   47 PrimaryExp: '(' Exp ')' .

    $default  reduce using rule 47 (PrimaryExp)


State 91

   32 LOrExp: LOrExp OROP LAndExp .
   34 LAndExp: LAndExp . ANDOP EqExp

    AND  shift, and go to state 66

    $default  reduce using rule 32 (LOrExp)

    ANDOP  go to state 67


State 92

   34 LAndExp: LAndExp ANDOP EqExp .
   36 EqExp: EqExp . EQOP RelExp

    EQ  shift, and go to state 68
    NE  shift, and go to state 69

    $default  reduce using rule 34 (LAndExp)

    EQOP  go to state 70


State 93

   36 EqExp: EqExp EQOP RelExp .
   38 RelExp: RelExp . RELOP AddExp

    LE   shift, and go to state 71
    GE   shift, and go to state 72
    '<'  shift, and go to state 73
    '>'  shift, and go to state 74

    $default  reduce using rule 36 (EqExp)

    RELOP  go to state 75


State 94

   38 RelExp: RelExp RELOP AddExp .
   40 AddExp: AddExp . ADDOP MulExp

    '+'  shift, and go to state 76
    '-'  shift, and go to state 77

    $default  reduce using rule 38 (RelExp)

    ADDOP  go to state 78


State 95

   40 AddExp: AddExp ADDOP MulExp .
   42 MulExp: MulExp . MULOP UnaryExp

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '%'  shift, and go to state 81

    $default  reduce using rule 40 (AddExp)

    MULOP  go to state 82


State 96

   42 MulExp: MulExp MULOP UnaryExp .

    $default  reduce using rule 42 (MulExp)


State 97

   22 SimpleStmt: RETURN . Exp ';'
   23           | RETURN . ';'

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    ';'        shift, and go to state 116
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 117
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 98

   17 ClosedStmt: IF . '(' Exp ')' ClosedStmt ELSE ClosedStmt
   19 OpenStmt: IF . '(' Exp ')' Stmt
   20         | IF . '(' Exp ')' ClosedStmt ELSE OpenStmt

    '('  shift, and go to state 118


State 99

   18 ClosedStmt: WHILE . '(' Exp ')' ClosedStmt
   21 OpenStmt: WHILE . '(' Exp ')' OpenStmt

    '('  shift, and go to state 119


State 100

   28 SimpleStmt: BREAK . ';'

    ';'  shift, and go to state 120


State 101

   29 SimpleStmt: CONTINUE . ';'

    ';'  shift, and go to state 121


State 102

   13 Block: '{' BlockItemList '}' .

    $default  reduce using rule 13 (Block)


State 103

   27 SimpleStmt: ';' .

    $default  reduce using rule 27 (SimpleStmt)


State 104

   25 SimpleStmt: Block .

    $default  reduce using rule 25 (SimpleStmt)


State 105

   56 BlockItem: Stmt .

    $default  reduce using rule 56 (BlockItem)


State 106

   15 Stmt: ClosedStmt .

    $default  reduce using rule 15 (Stmt)


State 107

   14 Stmt: OpenStmt .

    $default  reduce using rule 14 (Stmt)


State 108

   16 ClosedStmt: SimpleStmt .

    $default  reduce using rule 16 (ClosedStmt)


State 109

   26 SimpleStmt: Exp . ';'

    ';'  shift, and go to state 122


State 110

   55 BlockItem: Decl .

    $default  reduce using rule 55 (BlockItem)


State 111

   63 BlockItemList: BlockItemList BlockItem .

    $default  reduce using rule 63 (BlockItemList)


State 112

   24 SimpleStmt: LVal . '=' Exp ';'
   49 PrimaryExp: LVal .

    '='  shift, and go to state 123

    $default  reduce using rule 49 (PrimaryExp)


State 113

   58 VarDecl: Type . VarDefList ';'

    IDENT  shift, and go to state 51

    VarDef      go to state 16
    VarDefList  go to state 17


State 114

   46 UnaryExp: IDENT '(' FuncRParams ')' .

    $default  reduce using rule 46 (UnaryExp)


State 115

   12 FuncRParams: FuncRParams ',' . Exp

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 124
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 116

   23 SimpleStmt: RETURN ';' .

    $default  reduce using rule 23 (SimpleStmt)


State 117

   22 SimpleStmt: RETURN Exp . ';'

    ';'  shift, and go to state 125


State 118

   17 ClosedStmt: IF '(' . Exp ')' ClosedStmt ELSE ClosedStmt
   19 OpenStmt: IF '(' . Exp ')' Stmt
   20         | IF '(' . Exp ')' ClosedStmt ELSE OpenStmt

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 126
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 119

   18 ClosedStmt: WHILE '(' . Exp ')' ClosedStmt
   21 OpenStmt: WHILE '(' . Exp ')' OpenStmt

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 127
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 120

   28 SimpleStmt: BREAK ';' .

    $default  reduce using rule 28 (SimpleStmt)


State 121

   29 SimpleStmt: CONTINUE ';' .

    $default  reduce using rule 29 (SimpleStmt)


State 122

   26 SimpleStmt: Exp ';' .

    $default  reduce using rule 26 (SimpleStmt)


State 123

   24 SimpleStmt: LVal '=' . Exp ';'

    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Exp         go to state 128
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 49
    UNARYOP     go to state 50


State 124

   12 FuncRParams: FuncRParams ',' Exp .

    $default  reduce using rule 12 (FuncRParams)


State 125

   22 SimpleStmt: RETURN Exp ';' .

    $default  reduce using rule 22 (SimpleStmt)


State 126

   17 ClosedStmt: IF '(' Exp . ')' ClosedStmt ELSE ClosedStmt
   19 OpenStmt: IF '(' Exp . ')' Stmt
   20         | IF '(' Exp . ')' ClosedStmt ELSE OpenStmt

    ')'  shift, and go to state 129


State 127

   18 ClosedStmt: WHILE '(' Exp . ')' ClosedStmt
   21 OpenStmt: WHILE '(' Exp . ')' OpenStmt

    ')'  shift, and go to state 130


State 128

   24 SimpleStmt: LVal '=' Exp . ';'

    ';'  shift, and go to state 131


State 129

   17 ClosedStmt: IF '(' Exp ')' . ClosedStmt ELSE ClosedStmt
   19 OpenStmt: IF '(' Exp ')' . Stmt
   20         | IF '(' Exp ')' . ClosedStmt ELSE OpenStmt

    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    WHILE      shift, and go to state 99
    BREAK      shift, and go to state 100
    CONTINUE   shift, and go to state 101
    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '{'        shift, and go to state 57
    ';'        shift, and go to state 103
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Block       go to state 104
    Stmt        go to state 132
    ClosedStmt  go to state 133
    OpenStmt    go to state 107
    SimpleStmt  go to state 108
    Exp         go to state 109
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 112
    UNARYOP     go to state 50


State 130

   18 ClosedStmt: WHILE '(' Exp ')' . ClosedStmt
   21 OpenStmt: WHILE '(' Exp ')' . OpenStmt

    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    WHILE      shift, and go to state 99
    BREAK      shift, and go to state 100
    CONTINUE   shift, and go to state 101
    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '{'        shift, and go to state 57
    ';'        shift, and go to state 103
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Block       go to state 104
    ClosedStmt  go to state 134
    OpenStmt    go to state 135
    SimpleStmt  go to state 108
    Exp         go to state 109
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 112
    UNARYOP     go to state 50


State 131

   24 SimpleStmt: LVal '=' Exp ';' .

    $default  reduce using rule 24 (SimpleStmt)


State 132

   19 OpenStmt: IF '(' Exp ')' Stmt .

    $default  reduce using rule 19 (OpenStmt)


State 133

   15 Stmt: ClosedStmt .
   17 ClosedStmt: IF '(' Exp ')' ClosedStmt . ELSE ClosedStmt
   20 OpenStmt: IF '(' Exp ')' ClosedStmt . ELSE OpenStmt

    ELSE  shift, and go to state 136

    $default  reduce using rule 15 (Stmt)


State 134

   18 ClosedStmt: WHILE '(' Exp ')' ClosedStmt .

    $default  reduce using rule 18 (ClosedStmt)


State 135

   21 OpenStmt: WHILE '(' Exp ')' OpenStmt .

    $default  reduce using rule 21 (OpenStmt)


State 136

   17 ClosedStmt: IF '(' Exp ')' ClosedStmt ELSE . ClosedStmt
   20 OpenStmt: IF '(' Exp ')' ClosedStmt ELSE . OpenStmt

    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    WHILE      shift, and go to state 99
    BREAK      shift, and go to state 100
    CONTINUE   shift, and go to state 101
    IDENT      shift, and go to state 32
    INT_CONST  shift, and go to state 33
    '('        shift, and go to state 34
    '{'        shift, and go to state 57
    ';'        shift, and go to state 103
    '+'        shift, and go to state 35
    '-'        shift, and go to state 36
    '!'        shift, and go to state 37

    Block       go to state 104
    ClosedStmt  go to state 137
    OpenStmt    go to state 138
    SimpleStmt  go to state 108
    Exp         go to state 109
    LOrExp      go to state 39
    LAndExp     go to state 40
    EqExp       go to state 41
    RelExp      go to state 42
    AddExp      go to state 43
    MulExp      go to state 44
    UnaryExp    go to state 45
    PrimaryExp  go to state 46
    Number      go to state 48
    LVal        go to state 112
    UNARYOP     go to state 50


State 137

   17 ClosedStmt: IF '(' Exp ')' ClosedStmt ELSE ClosedStmt .

    $default  reduce using rule 17 (ClosedStmt)


State 138

   20 OpenStmt: IF '(' Exp ')' ClosedStmt ELSE OpenStmt .

    $default  reduce using rule 20 (OpenStmt)
